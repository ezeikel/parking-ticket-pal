// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum TicketType {
  PARKING_CHARGE_NOTICE
  PENALTY_CHARGE_NOTICE
}

enum LetterType {
  CHALLENGE
  APPEAL
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum TicketStatus {
  REDUCED_PAYMENT_DUE
  FULL_PAYMENT_DUE
  FULL_PAYMENT_PLUS_INCREASE_DUE
  PAID
  APPEALED
  APPEAL_SUCCESSFUL
  APPEAL_REJECTED
  COUNTY_COURT
  COUNTY_COURT_JUDGEMENT
  ORDER_FOR_RECOVERY
  DEBT_COLLECTION
  TRIBUNAL
  POPLA
}

enum IssuerType {
  COUNCIL
  TFL
  PRIVATE_COMPANY
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  address   String?
  vehicles  Vehicle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Vehicle {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  make         String // e.g. Toyota, Honda
  model        String // e.g. Camry, Civic
  year         Int // year of the vehicle - could probably look this up via number plate
  registration String
  tickets      Ticket[] // tickets associated with the vehicle
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("vehicles")
}

model Ticket {
  id                  String         @id @default(cuid())
  pcnNumber           String         @unique
  contravention       Contravention  @relation(fields: [contraventionId], references: [id])
  contraventionId     String
  description         String?
  dateIssued          DateTime
  dateOfContravention DateTime
  status              TicketStatus[] @default([REDUCED_PAYMENT_DUE])
  letters             Letter[]
  type                TicketType
  amountDue           Int
  issuer              String
  issuerType          IssuerType
  vehicle             Vehicle        @relation(fields: [vehicleId], references: [id])
  vehicleId           String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  media               Media[]

  @@map("tickets")
}

model Letter {
  id        String     @id @default(cuid())
  type      LetterType
  ticket    Ticket     @relation(fields: [ticketId], references: [id])
  ticketId  String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("letters")
}

model Contravention {
  id           String   @id @default(cuid())
  code         String   @unique
  description  String
  legalClauses String[]
  ticket       Ticket[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contraventions")
}

model Media {
  id          String    @id @default(cuid())
  url         String
  name        String
  description String?
  type        MediaType
  ticket      Ticket    @relation(fields: [ticketId], references: [id])
  ticketId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("media")
}
