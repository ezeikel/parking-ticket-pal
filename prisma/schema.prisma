generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum TicketType {
  PARKING_CHARGE_NOTICE
  PENALTY_CHARGE_NOTICE
}

enum LetterType {
  INITIAL_NOTICE
  APPEAL_RESPONSE
  NOTICE_TO_OWNER
  CHARGE_CERTIFICATE
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum TicketStatus {
  // Initial Stages
  REDUCED_PAYMENT_DUE // Initial ticket with reduced payment option (within 14 days)
  FULL_PAYMENT_DUE // After 14 days, full amount due (within 28 days)

  // Post 28 Days - Notice to Owner
  NOTICE_TO_OWNER_SENT // Notice to Owner sent (fine increases after 28 days)

  // Appeals Process (before Notice to Owner)
  APPEALED // Ticket is under appeal (prior to Notice to Owner)
  APPEAL_REJECTED // Appeal rejected, waiting for Notice to Owner
  APPEAL_ACCEPTED // Appeal accepted, no further action required

  // Post-Notice to Owner Appeals (Tribunals/POPLA)
  TRIBUNAL_APPEAL_IN_PROGRESS // Appeal made to London Tribunals or POPLA after Notice to Owner
  TRIBUNAL_APPEAL_ACCEPTED // Tribunal/POPLA appeal accepted, no further action required
  TRIBUNAL_APPEAL_REJECTED // Tribunal/POPLA appeal rejected, full payment or further escalation

  // Escalation after Notice to Owner
  ORDER_FOR_RECOVERY // Order for Recovery issued (if NTO not paid)
  CCJ_PENDING // County Court Judgment (CCJ) in process
  CCJ_ISSUED // CCJ has been issued

  // Ticket Resolution
  PAID // Ticket has been paid
  CANCELLED // Ticket has been cancelled (e.g., after successful appeal)
}

enum IssuerType {
  COUNCIL
  TFL
  PRIVATE_COMPANY
}

enum SubscriptionType {
  BASIC
  PRO
}

enum ReminderType {
  REDUCED_PAYMENT_DUE
  FULL_PAYMENT_DUE
  APPEAL_DEADLINE
  NOTICE_TO_OWNER_RESPONSE
  CHARGE_CERTIFICATE_RESPONSE
  FORM_DEADLINE
  OUT_OF_TIME_NOTICE
}

enum NotificationType {
  EMAIL
  SMS
  ALL
}

enum TransactionType {
  PURCHASE
  CONSUME
}

enum ProductType {
  PAY_PER_TICKET
  PRO_MONTHLY
  PRO_ANNUAL
}

enum MediaSource {
  ISSUER
  TICKET
  LETTER
  USER
}

enum FormType {
  PE2
  PE3
  TE7
  TE9
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phoneNumber  String?
  address      Json?
  /**
   * example address:
   * const address = {
   * line1: "123 Main St",
   * line2: "Apt 4B",
   * city: "London",
   * county: "Greater London",
   * postcode: "SW1A 1AA",
   * country: "United Kingdom",
   * coordinates: {
   * latitude: 51.5074,
   * longitude: -0.1278
   * }
   */
  vehicles     Vehicle[]
  subscription Subscription?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  signatureUrl String?

  @@map("users")
}

model Vehicle {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  make               String // e.g. Toyota, Honda
  model              String // e.g. Camry, Civic
  bodyType           String // e.g. Saloon, Hatchback
  fuelType           String // e.g. Petrol, Diesel
  year               Int // year of the vehicle - could probably look this up via number plate
  color              String
  registrationNumber String   @unique
  notes              String? // optional notes about the vehicle
  active             Boolean  @default(true) // indicates if the vehicle is currently owned by the user
  tickets            Ticket[] // tickets associated with the vehicle
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("vehicles")
}

model Ticket {
  id                String       @id @default(cuid())
  pcnNumber         String       @unique
  contraventionCode String
  location          Json
  /**
   * example address:
   * const address = {
   * line1: "123 Main St",
   * line2: "Apt 4B",
   * city: "London",
   * county: "Greater London",
   * postcode: "SW1A 1AA",
   * country: "United Kingdom",
   * coordinates: {
   * latitude: 51.5074,
   * longitude: -0.1278
   * }
   */
  issuedAt          DateTime
  contraventionAt   DateTime
  observedAt        DateTime?
  status            TicketStatus @default(REDUCED_PAYMENT_DUE)
  type              TicketType
  initialAmount     Int
  issuer            String
  issuerType        IssuerType
  verified          Boolean      @default(false)
  vehicle           Vehicle      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId         String
  media             Media[]
  appeals           Appeal[]
  reminders         Reminder[]
  letters           Letter[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  Form              Form[]

  @@map("tickets")
}

model Media {
  id          String      @id @default(cuid())
  url         String
  description String?
  type        MediaType
  source      MediaSource
  ticket      Ticket?     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    String?
  letter      Letter?     @relation(fields: [letterId], references: [id])
  letterId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("media")
}

model Letter {
  id            String     @id @default(cuid())
  type          LetterType
  ticket        Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId      String
  extractedText String // full text extracted from the letter
  summary       String // summary of key points from the letter
  appeal        Appeal?    @relation(fields: [appealId], references: [id])
  appealId      String?
  media         Media[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("letters")
}

model Appeal {
  id        String   @id @default(cuid())
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String   @unique
  content   String
  letter    Letter[]
  letterId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appeals")
}

model Subscription {
  id               String           @id @default(cuid())
  type             SubscriptionType @default(BASIC)
  stripeCustomerId String?          @unique
  user             User             @relation(fields: [userId], references: [id])
  userId           String           @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("subscriptions")
}

model Reminder {
  id               String            @id @default(cuid())
  type             ReminderType // e.g. REDUCED_PAYMENT_DUE, FULL_PAYMENT_DUE, APPEAL, etc.
  notificationType NotificationType? @default(EMAIL)
  ticketId         String
  ticket           Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sendAt           DateTime // When the reminder is scheduled to be sent
  sentAt           DateTime? // When the reminder was actually sent
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([ticketId, sendAt])
  @@map("reminders")
}

model Form {
  id        String    @id @default(cuid())
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  ticketId  String
  formType  FormType
  fileName  String
  fileUrl   String
  dueAt     DateTime? // Optional deadline for submitting this form
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("forms")
}
